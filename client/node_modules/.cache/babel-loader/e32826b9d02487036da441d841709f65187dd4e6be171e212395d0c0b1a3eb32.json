{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Desktop/\\u0434\\u0438\\u043F\\u043B\\u043E\\u043C/client/src/components/ConnectionStatus.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConnectionStatus = () => {\n  _s();\n  const [status, setStatus] = useState('checking');\n  const [isVisible, setIsVisible] = useState(false);\n  const [port, setPort] = useState(null);\n  useEffect(() => {\n    // Функция для проверки статуса соединения\n    const checkStatus = async () => {\n      setStatus('checking');\n      setIsVisible(true);\n\n      // Пробуем разные порты, начиная с 5001\n      const portsToTry = [5001, 5002, 5003, 5004, 5005];\n      let connected = false;\n\n      // Сначала проверим работает ли прокси (относительный URL)\n      try {\n        await axios.get('/api/test/cors-check');\n        setStatus('connected');\n        setPort('proxy');\n        connected = true;\n        console.log('Соединение установлено через прокси');\n      } catch (error) {\n        console.log('Ошибка соединения через прокси:', error.message);\n      }\n\n      // Если прокси не работает, пробуем прямое соединение с разными портами\n      if (!connected) {\n        for (const p of portsToTry) {\n          try {\n            await axios.get(`http://localhost:${p}/api/test/cors-check`);\n            setStatus('connected');\n            setPort(p);\n            connected = true;\n            console.log(`Соединение установлено на порту ${p}`);\n\n            // Обновляем baseURL для axios\n            axios.defaults.baseURL = `http://localhost:${p}/api`;\n            console.log(`Обновлен baseURL для axios: ${axios.defaults.baseURL}`);\n            break;\n          } catch (error) {\n            console.log(`Ошибка соединения на порту ${p}:`, error.message);\n          }\n        }\n      }\n\n      // Если не удалось подключиться ни к одному порту\n      if (!connected) {\n        setStatus('disconnected');\n        setPort(null);\n        console.error('Не удалось подключиться ни к одному порту');\n      } else {\n        // Скрываем индикатор через 3 секунды после успешного соединения\n        setTimeout(() => setIsVisible(false), 3000);\n      }\n    };\n\n    // Проверяем соединение при монтировании и каждые 30 секунд\n    checkStatus();\n    const interval = setInterval(checkStatus, 30000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Если индикатор скрыт, не отображаем ничего\n  if (!isVisible) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `fixed bottom-4 left-4 px-4 py-2 rounded-full shadow-lg flex items-center transition-all ${status === 'connected' ? 'bg-green-500 text-white' : status === 'disconnected' ? 'bg-red-500 text-white' : 'bg-yellow-500 text-white'}`,\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: `inline-block w-3 h-3 rounded-full mr-2 ${status === 'connected' ? 'bg-green-200' : status === 'disconnected' ? 'bg-red-200' : 'bg-yellow-200'} ${status === 'checking' ? 'animate-pulse' : ''}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"text-sm font-medium\",\n      children: [status === 'connected' && (port === 'proxy' ? 'Соединение установлено (прокси)' : `Соединение установлено (порт ${port})`), status === 'disconnected' && 'Ошибка соединения с сервером', status === 'checking' && 'Проверка соединения...']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s(ConnectionStatus, \"mSYYgh9JTTQDh7Ly7srw0zeNF9I=\");\n_c = ConnectionStatus;\nexport default ConnectionStatus;\nvar _c;\n$RefreshReg$(_c, \"ConnectionStatus\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","ConnectionStatus","_s","status","setStatus","isVisible","setIsVisible","port","setPort","checkStatus","portsToTry","connected","get","console","log","error","message","p","defaults","baseURL","setTimeout","interval","setInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/apple/Desktop/диплом/client/src/components/ConnectionStatus.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst ConnectionStatus = () => {\n  const [status, setStatus] = useState('checking');\n  const [isVisible, setIsVisible] = useState(false);\n  const [port, setPort] = useState(null);\n  \n  useEffect(() => {\n    // Функция для проверки статуса соединения\n    const checkStatus = async () => {\n      setStatus('checking');\n      setIsVisible(true);\n      \n      // Пробуем разные порты, начиная с 5001\n      const portsToTry = [5001, 5002, 5003, 5004, 5005];\n      let connected = false;\n      \n      // Сначала проверим работает ли прокси (относительный URL)\n      try {\n        await axios.get('/api/test/cors-check');\n        setStatus('connected');\n        setPort('proxy');\n        connected = true;\n        console.log('Соединение установлено через прокси');\n      } catch (error) {\n        console.log('Ошибка соединения через прокси:', error.message);\n      }\n      \n      // Если прокси не работает, пробуем прямое соединение с разными портами\n      if (!connected) {\n        for (const p of portsToTry) {\n          try {\n            await axios.get(`http://localhost:${p}/api/test/cors-check`);\n            setStatus('connected');\n            setPort(p);\n            connected = true;\n            console.log(`Соединение установлено на порту ${p}`);\n            \n            // Обновляем baseURL для axios\n            axios.defaults.baseURL = `http://localhost:${p}/api`;\n            console.log(`Обновлен baseURL для axios: ${axios.defaults.baseURL}`);\n            \n            break;\n          } catch (error) {\n            console.log(`Ошибка соединения на порту ${p}:`, error.message);\n          }\n        }\n      }\n      \n      // Если не удалось подключиться ни к одному порту\n      if (!connected) {\n        setStatus('disconnected');\n        setPort(null);\n        console.error('Не удалось подключиться ни к одному порту');\n      } else {\n        // Скрываем индикатор через 3 секунды после успешного соединения\n        setTimeout(() => setIsVisible(false), 3000);\n      }\n    };\n    \n    // Проверяем соединение при монтировании и каждые 30 секунд\n    checkStatus();\n    const interval = setInterval(checkStatus, 30000);\n    \n    return () => clearInterval(interval);\n  }, []);\n  \n  // Если индикатор скрыт, не отображаем ничего\n  if (!isVisible) return null;\n  \n  return (\n    <div \n      className={`fixed bottom-4 left-4 px-4 py-2 rounded-full shadow-lg flex items-center transition-all ${\n        status === 'connected' ? 'bg-green-500 text-white' : \n        status === 'disconnected' ? 'bg-red-500 text-white' : 'bg-yellow-500 text-white'\n      }`}\n    >\n      <span className={`inline-block w-3 h-3 rounded-full mr-2 ${\n        status === 'connected' ? 'bg-green-200' : \n        status === 'disconnected' ? 'bg-red-200' : 'bg-yellow-200'\n      } ${status === 'checking' ? 'animate-pulse' : ''}`}></span>\n      \n      <span className=\"text-sm font-medium\">\n        {status === 'connected' && (port === 'proxy' \n          ? 'Соединение установлено (прокси)' \n          : `Соединение установлено (порт ${port})`)}\n        {status === 'disconnected' && 'Ошибка соединения с сервером'}\n        {status === 'checking' && 'Проверка соединения...'}\n      </span>\n    </div>\n  );\n};\n\nexport default ConnectionStatus; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}